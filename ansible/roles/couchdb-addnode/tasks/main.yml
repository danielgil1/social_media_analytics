# TODO: Add proper validation when request fails
#Â TODO: Set up variable coordination node correctly

- name: Selecting coordinator node
  set_fact:
    coordinator_node: "{{ hostvars[item]['ansible_host'] }}"
  with_items: "{{ groups['dbservers'] }}"
  run_once: true

- name: Debug coordinator node
  debug:  
    msg: "Coordinator node {{ coordinator_node }}"
  run_once: true

- name: Add node to the cluster
  uri:
    url: http://{{ coordinator_node }}:{{ node_management_port }}/_nodes/couchdb@{{ item }}
    method: PUT
    user: "{{ www_user }}"
    password: "{{ www_password }}"
    body: '{}'
    body_format: json
    return_content: yes
    headers:
      Content-Type: "application/json"
  register: result
  failed_when: false
  loop: "{{ new_db_instances }}"

# shard replicas will be handled by cluster

# # set target node in maintenance module
# - name: Set node in maintenance mode
#   uri:
#     url: http://{{ item }}:{{http_api_port}}/_node/couchdb/_config/couchdb/maintenance_mode
#     method: PUT
#     user: "{{ www_user }}"
#     password: "{{ www_password }}"
#     body: 'true'
#     body_format: json
#     return_content: yes
#     headers:
#       Content-Type: "application/json"
#   register: result
#   failed_when: false
#   loop: "{{ new_db_instances }}"

# # verify target node is down
# - name: Check maintenance mode
#   uri:
#     url: http://{{ item }}:{{http_api_port}}/_up
#     method: GET
#     user: "{{ www_user }}"
#     password: "{{ www_password }}"
#     return_content: yes
#     status_code: 404
#     headers:
#       Content-Type: "application/json"
#   register: result
#   loop: "{{ new_db_instances }}"

#   - name: Update metadata
#   uri:
#     url: http://localhost:{{ node_management_port }}/_dbs/{{ item.name }}
#     method: GET
#     user: "{{ www_user }}"
#     password: "{{ www_password }}"
#     return_content: yes
#     status_code: 404
#     headers:
#       Content-Type: "application/json"
#   register: result
#   loop: "{{ databases }}"